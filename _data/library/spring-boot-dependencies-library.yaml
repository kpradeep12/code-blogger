sections:
  - title: Apache Camel
    id: apache-camel
    show: false
    labels:
      - key: image
        value: 
    steps:
    - step:
      action: browser
      description: |
        If you want to start with a new project, then go to *&nbsp;*{:.fas .fa-external-link-alt .small_text} *[start.spring.io](https://start.spring.io/){:target="_blank"}*{:.ul} and provide configuration details (Java version, Spring boot version) and 
        choose *Apache Camel*{: .hl} as a dependency. Download and open it in your favorite Java editor.
  
        You can also extend any existing Spring Boot application in your local by adding the below dependency to your project.  
        
        >
        **groupId** org.apache.camel.springboot  
        **artifactId** camel-spring-boot-starter  
        **version** 3.7.0
        {: .action_lable}
    - step:
      action: editor
      description: |
        Let's verify Apache Camel by creating a simple Route. We will create a simple route using the **File** component. 
        This component will move files from one folder to another. To create a route, we need to extend **RouteBuilder** and override its **configure()** method. 
        Copy below code snippet into your project.
        
        ``` java
        import org.apache.camel.builder.RouteBuilder;
        import org.springframework.stereotype.Component;
  
        @Component
        public class FileRoute extends RouteBuilder {
            @Override
            public void configure() throws Exception {
                from("file:<source_folder>?noop=false")
                        .to("file:<destination_folder>");
            }
        }
        ```
        
        Create new source and destination folders in your local and update *\<source_folder>*{: .hl} and *\<destination_folder>*{: .hl} to point to newly created folders.
    - step: 
      action: editor
      description: |
        Update **application.properties** file. We need to keep the application up running because our _FileRoute_ need to look for files in the source folder, 
        so add the below property, this will keep the main thread alive, or another option is to add **spring-boot-starter-web** dependency in the _pom.xml_ file.
        
        ``` text
        camel.springboot.main-run-controller=true
        ```
    - step:
      action: editor
      description: |
        Run Spring Boot application. Once the application is up, then create a file in *\<source_folder>*{: .hl}, and as soon as the file got created then 
        Apache camel will move it to *\<destination_folder>*{: .hl}
    - step:
      action: info
      description: |
        Now we have Spring Boot project with Apache Camel running.
  - title: H2 Database with Spring Data JPA
    id: h2-database
    show: false
    labels:
      - key: image
        value: 
    steps:
    - step:
      action: browser
      description: |
        Create a new project by going to *&nbsp;*{:.fas .fa-external-link-alt .small_text} *[start.spring.io](https://start.spring.io/){:target="_blank"}*{:.ul} and provide configuration details (Java version, Spring boot version) and 
        choose *H2 Database*{: .hl}, *Spring Data JPA*{: .hl} and *Spring Web*{: .hl} as a dependencies. Download and open it in your Java editor.
  
        You can also extend any existing Spring Boot application in your local by adding the below dependencies to that project.  
        
        ``` xml
        <dependency>
          <groupId>com.h2database</groupId>
          <artifactId>h2</artifactId>
          <scope>runtime</scope>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        ```
    - step: 
      action: editor
      description: |
        Update **application.properties** file with below properties
        
        ``` text
        spring.datasource.url=jdbc:h2:mem:empdb
        spring.datasource.driver-class-name=org.h2.Driver
        spring.datasource.username=sa
        spring.datasource.password=
        spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
        spring.h2.console.enabled=true
        spring.jpa.hibernate.ddl-auto=create
        spring.jpa.show-sql=true
        ```
        This will create a **in-memory database** with name _empdb_ and enables H2 DB web console. 
        Because it is an in-memory database, so data will lose once we restart the application. 
        To save data in a file, update the property **spring.datasource.url** with value **jdbc:h2:file:./empdb**
        
        Run Spring boot application.
    - step:
      action: editor
      description: |
        Create a new class called _User_ in the project with the below content.

        ``` java
        @Entity
        public class User {
            @Id
            private String userId;
            private String firstName;
            private String lastName;

            public User() {}

            public User(String userId, String firstName, String lastName) {
                this.userId = userId;
                this.firstName = firstName;
                this.lastName = lastName;
            }
        }
        ```
        
        Create a _UserRepository_ interface which extends *JpaRepository*{: .hl}

        ``` java
        public interface UserRepository extends JpaRepository<User, String> {}
        ```

        Create a _UserRepoInitializer_ class

        ``` java
        @Component
        class UserRepoInitializer implements CommandLineRunner {
          @Autowired
          UserRepository userRepository;
          @Override
          public void run(String... args) throws Exception {
            Stream.of(new User(UUID.randomUUID().toString(), "Amanda", ""),
                new User(UUID.randomUUID().toString(), "Hannah", ""),
                new User(UUID.randomUUID().toString(), "Anna", ""),
                new User(UUID.randomUUID().toString(), "Audrey", ""),
                new User(UUID.randomUUID().toString(), "Caroline", ""))
                .forEach(userRepository::save);
            userRepository.findAll().forEach(System.out::println);
          }
        }
        ```  
        As an alternative to UserRepoInitializer, we can add _data.sql_ in resources folder and inlude insert statements in it.
        
        ``` sql
        INSERT INTO USER(USER_ID, FIRST_NAME, LAST_NAME) VALUES ('1','Mathew','Luis');
        INSERT INTO USER(USER_ID, FIRST_NAME, LAST_NAME) VALUES ('2','Olive','Brenz');
        INSERT INTO USER(USER_ID, FIRST_NAME, LAST_NAME) VALUES ('3','Joseph','Grand');
        INSERT INTO USER(USER_ID, FIRST_NAME, LAST_NAME) VALUES ('4','David','Jr');
        INSERT INTO USER(USER_ID, FIRST_NAME, LAST_NAME) VALUES ('5','Arvind','Kumar');
        ```
    - step:
      action: browser
      description: |
        Access H2 database web console at *&nbsp;*{:.fas .fa-external-link-alt .small_text}*[http://localhost:8080/h2-console](http://localhost:8080/h2-console){:target="_blank"}*{:.ul}  
        Web console prompts user to enter connection details;
        
        >
        JDBC URL: <what ever the value provided for **spring.datasource.url** in the application properties>
        User Name: sa
        Password:
        {: .action_lable}

        Click on *Connect*{: .hl}

        In the left side tree, make sure you see table _USER_
    - step:
      action: info
      description: |
        Now we have Spring Boot project with H2 Database running.
  - title: Thymeleaf
    id: thymeleaf
    show: false
    labels:
      - key: image
        value: 
    steps:
    - step:
      action: browser
      description: |
        Create a new project by going to *&nbsp;*{:.fas .fa-external-link-alt .small_text} *[start.spring.io](https://start.spring.io/){:target="_blank"}*{:.ul} and provide configuration details (Java version, Spring boot version) and 
        choose *Thymeleaf*{: .hl} as a dependency. Download and open it in your Java editor.
  
        You can also extend any existing Spring Boot application in your local by adding the below dependency to that project.  
        
        ``` xml
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        ```
    - step: 
      action: editor
      description: |
        
        Update **application.properties** file with below properties
        
        ``` text
        spring.datasource.url=jdbc:h2:mem:empdb
        spring.datasource.driver-class-name=org.h2.Driver
        spring.datasource.username=sa
        spring.datasource.password=
        spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
        spring.h2.console.enabled=true
        spring.jpa.hibernate.ddl-auto=create
        spring.jpa.show-sql=true
        ```
        This will create a **in-memory database** with name _empdb_ and enables H2 DB web console. 
        Because it is an in-memory database, so data will lose once we restart the application. 
        To save data in a file, update the property **spring.datasource.url** with value **jdbc:h2:file:./empdb**
        
        Run Spring boot application.
    - step:
      action: editor
      description: |
        Create a new class called _User_ in the project with the below content.

        ``` java
        @Entity
        public class User {
            @Id
            private String userId;
            private String firstName;
            private String lastName;

            public User() {}

            public User(String userId, String firstName, String lastName) {
                this.userId = userId;
                this.firstName = firstName;
                this.lastName = lastName;
            }
        }
        ```
        
        Create a _UserRepository_ interface which extends *JpaRepository*{: .hl}

        ``` java
        public interface UserRepository extends JpaRepository<User, String> {}
        ```

        Create a _UserRepoInitializer_ class

        ``` java
        @Component
        class UserRepoInitializer implements CommandLineRunner {
          @Autowired
          UserRepository userRepository;
          @Override
          public void run(String... args) throws Exception {
            Stream.of(new User(UUID.randomUUID().toString(), "Amanda", ""),
                new User(UUID.randomUUID().toString(), "Hannah", ""),
                new User(UUID.randomUUID().toString(), "Anna", ""),
                new User(UUID.randomUUID().toString(), "Audrey", ""),
                new User(UUID.randomUUID().toString(), "Caroline", ""))
                .forEach(userRepository::save);
            userRepository.findAll().forEach(System.out::println);
          }
        }
        ```  
    - step:
      action: browser
      description: |
        Access H2 database web console at *&nbsp;*{:.fas .fa-external-link-alt .small_text}*[http://localhost:8080/h2-console](http://localhost:8080/h2-console){:target="_blank"}*{:.ul}  
        Web console prompts user to enter connection details;
        
        >
        JDBC URL: <what ever the value provided for **spring.datasource.url** in the application properties>
        User Name: sa
        Password:
        {: .action_lable}

        Click on *Connect*{: .hl}

        In the left side tree, make sure you see table _USER_
    - step:
      action: info
      description: |
        Now we have Spring Boot project with H2 Database running.
  - title: Spring Dev Tools
    id: spring-dev-tools
    show: false
    labels:
      - key: image
        value:
    steps:
      - step:
        action: browser
        description: |
          Create a new project by going to *&nbsp;*{:.fas .fa-external-link-alt .small_text} *[start.spring.io](https://start.spring.io/){:target="_blank"}*{:.ul} and provide configuration details (Java version, Spring boot version) and 
          choose *Spring Boot DevTools*{: .hl} and *Thymeleaf*{: .hl} as a dependency. (Note that we are including Web, just to demostrate dev tools). Download and open it in your Java editor.
    
          You can also extend any existing Spring Boot application in your local by adding the below dependencies to that project.  
    
          ``` xml
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-devtools</artifactId>
              <scope>runtime</scope>
              <optional>true</optional>
          </dependency>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-thymeleaf</artifactId>
          </dependency>
          ```
          >
          Spring Dev Tools will use 35729 port number, so ensure no applications are using this port number.
          {: .action_lable}
      - step:
        action: browser
        description: |
          Install *LiveReload*{: .hl} browser extension. Click *&nbsp;*{:.fas .fa-external-link-alt .small_text}*[here](http://livereload.com/extensions/){:target="_blank"}*{:.ul} for installation instructions.
          After the installation, start the LiveReload browser extension. This extension will look for a 35729 port on localhost and connects to it.
      - step:
        action: editor
        description: |
          We need to do some configuration on the IntelliJ editor to do LiveReload work properly.
          
          * In File > Settings > Build, Execution, Deployment > Compiler > Enable 'Build project automatically'
          * Go to Actions (Ctrl + Shift + A) and search for Registry. Look for 'compiler.automake.allow.when.app.running' and enable it.
          
          Add below Java Class 
          
          ``` java
          @Controller
          public class IndexController {
              @GetMapping("/")
              public String index() {
                  return "index";
              }
          }
          ```
          
          In templates folder add index.html
          
          ``` html
          <html>
            <body>
              <h2>Hello World!</h2>
            </body>
          </html>
          ```
  
          Run Spring boot application. In the startup logs, look for the line **LiveReload server is running on port 35729**. This is to make sure that the LiveReload server is up.
      - step:
        action: browser
        description: |
          Enable _LiveReload_ in the browser and access application at *&nbsp;*{:.fas .fa-external-link-alt .small_text}*[http://localhost:8080](http://localhost:8080){:target="_blank"}*{:.ul}
      - step:
        action: info
        description: |
          Now we have Spring Boot project with Dev Tools.
  - title: Mongo DB with Spring Data JPA
    id: mongo-db
    show: false
    labels:
      - key: image
        value:
    steps:
      - step:
        action: browser
        description: |
          Create a new project by going to *&nbsp;*{:.fas .fa-external-link-alt .small_text} *[start.spring.io](https://start.spring.io/){:target="_blank"}*{:.ul} and provide configuration details (Java version, Spring boot version) and 
          choose *Spring Boot DevTools*{: .hl} and *Thymeleaf*{: .hl} as a dependency. (Note that we are including Web, just to demostrate dev tools). Download and open it in your Java editor.
    
          You can also extend any existing Spring Boot application in your local by adding the below dependencies to that project.  
    
          ``` xml
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-devtools</artifactId>
              <scope>runtime</scope>
              <optional>true</optional>
          </dependency>
          <dependency>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-starter-thymeleaf</artifactId>
          </dependency>
          ```
          >
          Spring Dev Tools will use 35729 port number, so ensure no applications are using this port number.
          {: .action_lable}
      - step:
        action: browser
        description: |
          Install *LiveReload*{: .hl} browser extension. Click *&nbsp;*{:.fas .fa-external-link-alt .small_text}*[here](http://livereload.com/extensions/){:target="_blank"}*{:.ul} for installation instructions.
          After the installation, start the LiveReload browser extension. This extension will look for a 35729 port on localhost and connects to it.
      - step:
        action: editor
        description: |
          We need to do some configuration on the IntelliJ editor to do LiveReload work properly.
    
          * In File > Settings > Build, Execution, Deployment > Compiler > Enable 'Build project automatically'
          * Go to Actions (Ctrl + Shift + A) and search for Registry. Look for 'compiler.automake.allow.when.app.running' and enable it.
    
          Add below Java Class 
    
          ``` java
          @Controller
          public class IndexController {
              @GetMapping("/")
              public String index() {
                  return "index";
              }
          }
          ```
    
          In templates folder add index.html
    
          ``` html
          <html>
            <body>
              <h2>Hello World!</h2>
            </body>
          </html>
          ```
    
          Run Spring boot application. In the startup logs, look for the line **LiveReload server is running on port 35729**. This is to make sure that the LiveReload server is up.
      - step:
        action: browser
        description: |
          Enable _LiveReload_ in the browser and access application at *&nbsp;*{:.fas .fa-external-link-alt .small_text}*[http://localhost:8080](http://localhost:8080){:target="_blank"}*{:.ul}
      - step:
        action: info
        description: |
          Now we have Spring Boot project with Dev Tools.